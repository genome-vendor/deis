heat_template_version: 2013-05-23
description: AutoScaling Cluster
parameters:
  name:
    type: string
    description: Name used for servers
    default: "coreos-server"
  image:
    type: string
    description: Image used for servers
    default: "CoreOS-835.9.0"
  key:
    type: string
    description: SSH key to connect to the servers
    default: "csa-ostack"
  flavor:
    type: string
    description: flavor used by the web servers
    default: "m1.small"
  network:
    type: string
    description: Network used by the server
    default: "development"
  subnet:
    type: string
    description: subnet on which the load balancer will be located
    default: "development-subnet"
  external_network:
    type: string
    description: UUID of a Neutron external network
    default: "external"
  http_port:
    type: number
    default: 80
  git_ssh_port:
    type: number
    default: 2222

resources:
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 3
      max_size: 5
      resource:
        type: ./lb_server.yaml
        properties:
          name: {get_param: name}
          flavor: {get_param: flavor}
          image: {get_param: image}
          key_name: {get_param: key}
          network: {get_param: network}
          external_network: {get_param: external_network}
          subnet: {get_param: subnet}
          http_port: {get_param: http_port}
          http_pool_id: {get_resource: http_pool}
          git_ssh_port: {get_param: git_ssh_port}
          git_ssh_pool_id: {get_resource: git_ssh_pool}
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          # This user-data file is crated via "make discovery-url" in this repo
          user_data: {get_file: ../coreos/user-data}

  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: 1

  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: -1

  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [web_server_scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt

  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 10 minutes
      meter_name: cpu_util
      statistic: avg
      period: 600
      evaluation_periods: 1
      threshold: 15
      alarm_actions:
        - {get_attr: [web_server_scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt

  http_monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: HTTP
      delay: 5
      max_retries: 5
      timeout: 5
      url_path: /health-check

  http_pool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      monitors: [{get_resource: http_monitor}]
      subnet: {get_param: subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: {get_param: http_port}

  http_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: {get_param: http_port}
      pool_id: {get_resource: http_pool}

  # assign a floating ip address to the load balancer
  # pool.
  http_lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
#      floating_ip_address: {get_param: http_floating_ip}
      port_id: {get_attr: [http_pool, vip, port_id]}

  git_ssh_monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  git_ssh_pool:
    type: OS::Neutron::Pool
    properties:
      protocol: TCP
      monitors: [{get_resource: git_ssh_monitor}]
      subnet: {get_param: subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: {get_param: git_ssh_port}

  git_ssh_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: {get_param: git_ssh_port}
      pool_id: {get_resource: git_ssh_pool}

  git_ssh_lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
#      floating_ip_address: {get_param: git_ssh_floating_ip}
      port_id: {get_attr: [git_ssh_pool, vip, port_id]}

outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaleup_policy, alarm_url]}

  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaledown_policy, alarm_url]}

  http_pool_ip_address:
    value: {get_attr: [http_pool, vip, address]}
    description: The IP address of the HTTP load balancing pool
#    value: {get_attr: [http_lb_floating, floating_ip_address]}

  git_ssh_pool_ip_address:
    value: {get_attr: [git_ssh_pool, vip, address]}
    description: The IP address of the Git SSH load balancing pool

  ceilometer_query:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util
          -q metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
      This is a Ceilometer query for statistics on the cpu_util meter
      Samples about OS::Nova::Server instances in this stack.  The -q
      parameter selects Samples according to the subject's metadata.
      When a VM's metadata includes an item of the form metering.X=Y,
      the corresponding Ceilometer resource has a metadata item of the
      form user_metadata.X=Y and samples about resources so tagged can
      be queried with a Ceilometer query term of the form
      metadata.user_metadata.X=Y.  In this case the nested stacks give
      their VMs metadata that is passed as a nested stack parameter,
      and this stack passes a metadata of the form metering.stack=Y,
      where Y is this stack's ID.
